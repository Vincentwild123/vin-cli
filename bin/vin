#! /usr/bin/env node

const {
    program
} = require('commander')
const inquirer = require('inquirer')
const fs = require('fs');
const download = require('../lib/download.js')
const promps = require('../lib/promps.js')
const handleProcessExit = require('../lib/handleProcessExit.js');
const installNodeModules = require('../lib/installNodeModules.js')
const {
    version
} = require('../lib/config.js')
const insert = require('../lib/insert.js');
const getTemplateRepo = require('../utils/getTemplateRepo.js')
const spinner = require('../utils/spinner.js')
const {
    errorLogger,
    infoLogger,
    successLogger
} = require('../utils/loggers.js')
program.version(version, '-V, --version', 'vin-cli version');
//commander
program
    .command('create <dirName>')
    .usage("vin create <dirName>")
    .description('choose template')
    .action(dirName => {
        //customize the process exit status
        handleProcessExit(dirName);
        //Check if the folder name exists
        if (fs.existsSync(dirName)) {
            errorLogger('The folder name already exists!')
            process.exit(0)
        }
        //unshift the question about the project name , default is folder name
        promps.unshift({
            type: 'input',
            name: 'name',
            default: dirName,
            message: 'Project name'
        })
        //show the question to collect user meta data
        inquirer.prompt(promps).then(function (answers) {
            const meta = {};
            Object.assign(meta, answers);
            //New a folder
            fs.mkdirSync(dirName, (err) => {
                if (err) {
                    errorLogger(err)
                    process.exit(0);
                }
            })
            //get the user template name
            let templateRepo = getTemplateRepo(meta.template);
            //------------------download begin ----------------------- //
            spinner.start('downloading template');
            console.time('Total time');
            download(templateRepo, dirName).then(() => {
                spinner.succeed('template download success!');
                try {
                    insert(dirName, meta);
                } catch (err) {
                    errorLogger(err);
                    //insert user meta data fail need to rollback 
                    process.exit(1)
                }
                if (meta.autoInstall) {
                    //run npm install/yarn in sub path
                    try {
                        installNodeModules(meta.installer, './' + dirName)
                    } catch (err) {
                        errorLogger(err);
                        errorLogger('Please delete the node_modules folder and install it manually again');
                        process.exit(0);
                    }
                } else {
                    infoLogger('next,you could')
                    infoLogger('cd ' + dirName);
                    infoLogger(meta.installer === 'yarn' ? 'yarn' : `${meta.installer} install`);
                    infoLogger(`${meta.installer} start`)
                }
                console.timeEnd()
            }).catch((err) => {
                spinner.fail(err)
                errorLogger(err);
                errorLogger('Please check your network');
                //template download fail need to rollback 
                process.exit(1);
            });
        }).catch((err) => {
            errorLogger('inquirer Error:', err);
        })

    })
    .on('--help', function () {
        console.log(' Examples:')
        console.log('')
        console.log('$ vin init <dirname>')
    })
program.parse(process.argv)