#! /usr/bin/env node

const {
    program
} = require('commander')
const inquirer = require('inquirer')
const fs = require('fs');
const download = require('../lib/download.js')
const spinner = require('../utils/spinner.js')
const chalk = require('chalk')
const promps = require('../lib/promps.js')
const {
    version
} = require('../lib/config.js')
const insert = require('../lib/insert.js');
const {
    execSync
} = require('child_process');
const getInstallCommander = require('../utils/getInstallCommander.js');
const getTemplateRepo = require('../utils/getTemplateRepo.js')
program.version(version, '-V, --version', 'vin脚手架版本');
//命令
program
    .command('create <dirName>')
    .description('choose download template')
    .action(dirName => {
        //check the dirname ifexisted
        if (fs.existsSync(dirName)) {
            console.log(chalk.red("dir name had existed!"))
            process.exit(0)
        }
        promps.unshift({
            type: 'input',
            name: 'name',
            default: dirName,
            message: 'Project name'
        })
        inquirer.prompt(promps).then(function (answers) {
            console.log()
            const meta = {};
            for (const key of Object.keys(answers)) {
                meta[key] = answers[key];
            }
            //新建项目文件夹
            fs.mkdirSync(dirName, (err) => {
                if (err) {
                    throw new Error('dir name already exists');
                }
            })
            let templateRepo = getTemplateRepo(meta.template);
            spinner.start('downloading...');
            download(templateRepo, dirName).then(() => {
                spinner.succeed('template download success!');
                try {
                    insert(dirName, meta);
                } catch (err) {
                    console.log(chalk.red(err));
                }
                console.log();
                //choose no auto install node_modules
                if (!meta.autoInstall) {
                    console.log(chalk.white('next,you could'))
                    console.log(chalk.white('cd ' + dirName))
                    console.log(chalk.white(meta.installer === 'yarn' ? 'yarn' : `${meta.installer} install`))
                    console.log(chalk.white(`${meta.installer} start`))
                } else {
                    //run npm install/yarn in sub dir
                    let command = getInstallCommander(meta.installer);
                    try {
                        execSync(command, {
                            cwd: './' + dirName,
                            stdio: 'inherit'
                        });
                    } catch (err) {
                        console.error(chalk.red('node modules install failed!'));
                        console.log(chalk.red(err));
                    }
                }
            }).catch((err) => {
                spinner.fail(err)
                console.log(chalk.red(err));
                console.log(chalk.green('please check the net status.'))
            });
        })

    })
    .on('--help', function () {
        console.log(' Examples:')
        console.log('')
        console.log('$ vin init <dirname>')
    })
program.parse(process.argv)